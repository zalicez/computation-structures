//metadata {"changes":4004,"assemble":58,"step":161,"run":330,"checkoff":6}
.include "/shared/bsim/beta.uasm"
.include "/shared/bsim/lab7checkoff.uasm"

// you may wish to use these macros in your code
.include "/shared/bsim/lab7macros.uasm"

// Handler for loading and storing byte (8-bit) data
// LDB(Ra, literal, Rc) loads data
// STB(Rc, literal, Ra) stores data

regs: RESERVE(32)	// Array to store register contents

UI:
	save_all_regs(regs)
	
	LD(xp,-4,r0)				// illegal instruction
	extract_field(r0,31,26,r1)	// extract opcode, bits 31:26
	CMPEQC(r1,0b010000,r2)		// OPCODE == LDB?
	BT(r2, ldb)					// yes, branch to LDB
	CMPEQC(r1,0b010001,r2)		// OPCODE == STB?
	BT(r2, STB)					// yes, branch to STB
	
								// no, illegal instruction
	LD(r31,regs,r0)				// restore regs
	LD(r31,regs+4,r1)
	LD(r31,regs+8,r2)
	BR(_IllegalInstruction)
	
	

ldb:
	extract_field(r0, 20, 16, r2)	// extract ra to r2
	MULC(r2,4,r2)					// convert to byte offset into regs array
	extract_field(r0, 25, 21, r1)	// extract rc to r1
	MULC(r1,4,r1)					// convert to byte offset into regs array
	extract_field(r0, 15, 0, r6)	// extract literal field from trapped instruction
	SHLC(r6,16,r6)
	SRAC(r6,16,r6)					// sign extend literal

	LD(r2,regs,r3)					// r3 <- regs[ra]
	ADD(r3,r6,r5)					// EA <- reg[ra] + sext(literal)

	extract_field(r5, 1, 0, r8)		// 2 LSBs of EA

	CMPEQC(r8, 0b00, r9)		
	BT(r9, then70)					// if 0b00, then MDATA[7:0]

	CMPEQC(r8, 0b01, r9)
	BT(r9, then158)					// if 0b01, then MDATA[15:8]

	CMPEQC(r8, 0b10, r9)
	BT(r9, then2316)				// if 0b10, then MDATA[23:16]

	CMPEQC(r8, 0b11, r9)
	BT(r9, then3124)				// if 0b11, then MDATA[31:24]
	
		
then70:
	LD(r5,0,r7)						// r4 (MDATA) <- MEM[EA]
	extract_field(r7, 7, 0, r4)
	BR(done)
then158:
	LD(r5,-1,r7)					// r4 (MDATA) <- MEM[EA]
	extract_field(r7, 15, 8, r4)
	BR(done)
then2316:
	LD(r5,-2,r7)					// r4 (MDATA) <- MEM[EA]
	extract_field(r7, 23, 16, r4)
	BR(done)
then3124: 
	LD(r5,-3,r7)					// r4 (MDATA) <- MEM[EA]
	extract_field(r7, 31, 24, r4)
	BR(done)
done: 
	ST(r4, regs, r1)				// regs[rc] <- MDATA 
	restore_all_regs(regs)
	JMP(xp)

STB:
	extract_field(r0, 20, 16, r2)   // r2 <- ra
	MULC(r2, 4, r2)					// convert to byte offset into regs array
    extract_field(r0, 25, 21, r1)   // r1 <- rc
	MULC(r1, 4, r1)					// convert to byte offset into regs array
	extract_field(r0, 15, 0, r6)    // r6 <- literal
    SHLC(r6, 16, r6)
    SRAC(r6, 16, r6)				// sign extend literal
    LD(r1, regs, r4)                // r4 <- regs[rc]
    
	extract_field(r4, 7, 0, r4)
    LD(r2, regs, r3)                // r3 <- regs[ra]
    ADD(r3, r6, r5)                 // EA <- regs[ra] + sext(lit)
    
	extract_field(r5, 1, 0, r8)     // r8 <- EA[1:0]
    CMPEQC(r8, 0b00, r9)
    BT(r9, CD00)
    CMPEQC(r8, 0b01, r9)
    BT(r9, CD01)
    CMPEQC(r8, 0b10, r9)
    BT(r9, CD10)
    CMPEQC(r8, 0b11, r9)
    BT(r9, CD11)

CD00:								// MDATA[7:0] <= Reg[Rc]7:0
	LD(r5, 0, r7)                   // r7 for MDATA
	extract_field(r7, 31, 24, r8)   // bits to shift
	extract_field(r7, 23, 16, r9)
	extract_field(r7, 15, 8, r10)
	extract_field(r7, 7, 0, r11)
	SHLC(r8, 24, r8)                // bits shift left
	SHLC(r9, 16, r9)
	SHLC(r10, 8, r10)
	MOVE(r8, r12)
	ADD(r9, r12, r12)
	ADD(r10, r12, r12)
	ADD(r4, r12, r12)
	ST(r12, 0, r5)                  // mem[EA] <- MDATA
	BR(stdone)

CD01:								// MDATA[15:8] <= Reg[Rc]7:0
	LD(r5, -1, r7)
	extract_field(r7, 31, 24, r8)
	extract_field(r7, 23, 16, r9)
	extract_field(r7, 15, 8, r10)
	extract_field(r7, 7, 0, r11)
	SHLC(r8, 24, r8)
	SHLC(r9, 16, r9)
	SHLC(r10, 8, r10)
	SHLC(r4, 8, r4)
	MOVE(r8, r12)
	ADD(r9, r12, r12)
	ADD(r4, r12, r12)
	ADD(r11, r12, r12)
	ST(r12, -1, r5)
	BR(stdone)

CD10:								// MDATA[23:16] <= Reg[Rc]7:0
	LD(r5, -2, r7)
	extract_field(r7, 31, 24, r8)
	extract_field(r7, 23, 16, r9)
	extract_field(r7, 15, 8, r10)
	extract_field(r7, 7, 0, r11)
	SHLC(r8, 24, r8)
	SHLC(r9, 16, r9)
	SHLC(r10, 8, r10)
	SHLC(r4, 16, r4)
	MOVE(r8, r12)
	ADD(r4, r12, r12)
	ADD(r10, r12, r12)
	ADD(r11, r12, r12)
	ST(r12, -2, r5)                 
	BR(stdone)

CD11:								// MDATA[31:24] <= Reg[Rc]7:0
	LD(r5, -3, r7)
	extract_field(r7, 31, 24, r8)
	extract_field(r7, 23, 16, r9)
	extract_field(r7, 15, 8, r10)
	extract_field(r7, 7, 0, r11)
	SHLC(r8, 24, r8)
	SHLC(r9, 16, r9)
	SHLC(r10, 8, r10)
	SHLC(r4, 24, r4)
	MOVE(r4, r12)
	ADD(r9, r12, r12)
	ADD(r10, r12, r12)
	ADD(r11, r12, r12)
	ST(r12, -3, r5)
	BR(stdone)
stdone:
	restore_all_regs(regs)
	JMP(xp)
